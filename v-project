#!/usr/bin/bash
EXEC_NAME="$(basename ${0})"
USAGE="Usage: ${EXEC_NAME} <type> <name> [kinds]
   or: ${EXEC_NAME} [--help,-h]
   or: ${EXEC_NAME} [--version,-V]

Where:
    type    Type of project (e.g. tex, py, rs). Used to fetch template.
    name    Project name.

    kinds   List of project subtypes.
            Ex: --beamer for slides when type is tex,
                --lib for libraries when type is c or c++)"


RED=91
GREEN=32
YELLOW=33
DEFAULT_FG=39
NORMAL=0


show-version() {
    echo "𝛎-Project v0.1.0"
}


show-usage() {
    echo "${USAGE}"
}


show-error() {
    echo "[$(error "error")] ${1}"
}


show-action() {
    echo "[$(good "action")] ${1}"
}


kind-log() {
    echo "$(tagged ${KIND}) ${1}"
}


tagged() {
    printf "[$(warning "${1}")]"
}


bold() {
    printf "\e[1m${1}\e[22m"
}


colored() {
    printf "\e[${1}m${2}\e[${DEFAULT_FG}m"
}


good() {
    printf $(colored ${GREEN} "${1}")
}


warning() {
    printf $(colored ${YELLOW} "${1}")
}


error() {
    printf $(colored ${RED} "${1}")
}


die() {
    exit 1
}


test-env-vars() {
    if test -z "${VPROJECT_TEMPLATES}"
    then
        show-error "VPROJECT_TEMPLATES not set."
        die
    fi
}


test-args() {
    if test -z "${1}" || test -z "${2}"
    then
        show-error "Missing argument(s)."
        echo

        show-usage
        die
    fi

    case "${1}" in
        -h | --help)
            show-usage
            exit 0
        ;; -V | --version)
            show-version
            exit 0
        ;;
    esac

    export TYPE="${1}"
    export PROJECT="${2}"
    export CURRENT_TEMPLATE="${VPROJECT_TEMPLATES}/${TYPE}"

    shift 2 # Ignores type and project

    export ARGS=$@
}


create-project() {
    show-action "Creating a \"${TYPE}\" project named \"${PROJECT}\""

    copy-template
    apply-pre-commands
    apply-post-commands
}


copy-template() {
    cp -rTi "${CURRENT_TEMPLATE}/files" "${PROJECT}"
}


load-template() {
    source "${CURRENT_TEMPLATE}/${KIND}.sh" 2>/dev/null ||
        show-error "No template found for \"${KIND}\""
}


apply-pre-commands() {
    for KIND in default ${ARGS}
    do
        export KIND="$(echo "${KIND}" | sed "s/^--//")"

        show-action "Applying ${KIND} pre-commands..."
        load-template "${KIND}"
        pre-commands
    done
}


apply-post-commands() {
    for KIND in default ${ARGS}
    do
        export KIND="$(echo "${KIND}" | sed "s/^--//")"

        show-action "Applying ${KIND} post-commands..."
        load-template "${KIND}"
        post-commands
    done
}


main() {
    test-env-vars || die
    test-args $ARGS || die
    create-project $ARGS
}


ARGS=$@ main
